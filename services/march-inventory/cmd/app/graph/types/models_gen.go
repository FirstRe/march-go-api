// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package types

import (
	"fmt"
	"io"
	"strconv"
)

type DeleteInventoryBranchResponse struct {
	Data   *ResponseID `json:"data,omitempty"`
	Status *Status     `json:"status,omitempty"`
}

type DeleteInventoryBrandResponse struct {
	Data   *ResponseID `json:"data,omitempty"`
	Status *Status     `json:"status,omitempty"`
}

type DeleteInventoryResponse struct {
	Data   *ResponseID `json:"data,omitempty"`
	Status *Status     `json:"status,omitempty"`
}

type DeleteInventoryTypeResponse struct {
	Data   *ResponseID `json:"data,omitempty"`
	Status *Status     `json:"status,omitempty"`
}

type DeletedInventory struct {
	Inventory []*DeletedInventoryType `json:"inventory,omitempty"`
	Brand     []*DeletedInventoryType `json:"brand,omitempty"`
	Branch    []*DeletedInventoryType `json:"branch,omitempty"`
	Type      []*DeletedInventoryType `json:"type,omitempty"`
}

type DeletedInventoryResponse struct {
	Data   *DeletedInventory `json:"data,omitempty"`
	Status *Status           `json:"status,omitempty"`
}

type DeletedInventoryType struct {
	ID        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	CreatedBy *string `json:"createdBy,omitempty"`
	UpdatedBy *string `json:"updatedBy,omitempty"`
	UpdatedAt string  `json:"updatedAt"`
	CreatedAt string  `json:"createdAt"`
}

type InventoriesResponse struct {
	Data   *ResponseInventories `json:"data,omitempty"`
	Status *Status              `json:"status,omitempty"`
}

type Inventory struct {
	ID              *string          `json:"id,omitempty"`
	InventoryTypeID *string          `json:"inventoryTypeId,omitempty"`
	Name            string           `json:"name"`
	Amount          int              `json:"amount"`
	Sold            *int             `json:"sold,omitempty"`
	Sku             *string          `json:"sku,omitempty"`
	SerialNumber    *string          `json:"serialNumber,omitempty"`
	Size            *string          `json:"size,omitempty"`
	PriceMember     *int             `json:"priceMember,omitempty"`
	Price           int              `json:"price"`
	ReorderLevel    *int             `json:"reorderLevel,omitempty"`
	ExpiryDate      *string          `json:"expiryDate,omitempty"`
	InventoryBrand  *InventoryBrand  `json:"inventoryBrand,omitempty"`
	InventoryBranch *InventoryBranch `json:"inventoryBranch,omitempty"`
	InventoryType   *InventoryType   `json:"inventoryType,omitempty"`
	Favorite        *bool            `json:"favorite,omitempty"`
	Description     *string          `json:"description,omitempty"`
	CreatedBy       *string          `json:"createdBy,omitempty"`
	UpdatedBy       *string          `json:"updatedBy,omitempty"`
	UpdatedAt       string           `json:"updatedAt"`
	CreatedAt       string           `json:"createdAt"`
}

type InventoryBranch struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
	UpdatedBy   *string `json:"updatedBy,omitempty"`
	UpdatedAt   string  `json:"updatedAt"`
	CreatedAt   string  `json:"createdAt"`
}

type InventoryBranchsDataResponse struct {
	Data   []*InventoryBranch `json:"data,omitempty"`
	Status *Status            `json:"status,omitempty"`
}

type InventoryBrand struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
	UpdatedBy   *string `json:"updatedBy,omitempty"`
	UpdatedAt   string  `json:"updatedAt"`
	CreatedAt   string  `json:"createdAt"`
}

type InventoryBrandsDataResponse struct {
	Data   []*InventoryBrand `json:"data,omitempty"`
	Status *Status           `json:"status,omitempty"`
}

type InventoryDataResponse struct {
	Data   *Inventory `json:"data,omitempty"`
	Status *Status    `json:"status,omitempty"`
}

type InventoryName struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type InventoryNameResponse struct {
	Data   []*InventoryName `json:"data,omitempty"`
	Status *Status          `json:"status,omitempty"`
}

type InventoryType struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
	UpdatedBy   *string `json:"updatedBy,omitempty"`
	UpdatedAt   string  `json:"updatedAt"`
	CreatedAt   string  `json:"createdAt"`
	Posts       []*Post `json:"posts"`
}

type InventoryTypeResponse struct {
	Data   *InventoryType `json:"data,omitempty"`
	Status *Status        `json:"status,omitempty"`
}

type InventoryTypesResponse struct {
	Data   []*InventoryType `json:"data,omitempty"`
	Status *Status          `json:"status,omitempty"`
}

type Mutation struct {
}

type MutationInventoryBranchResponse struct {
	Data   *ResponseID `json:"data,omitempty"`
	Status *Status     `json:"status,omitempty"`
}

type MutationInventoryBrandResponse struct {
	Data   *ResponseID `json:"data,omitempty"`
	Status *Status     `json:"status,omitempty"`
}

type MutationInventoryResponse struct {
	Data   *ResponseID `json:"data,omitempty"`
	Status *Status     `json:"status,omitempty"`
}

type MutationInventoryTypeResponse struct {
	Data   *ResponseID `json:"data,omitempty"`
	Status *Status     `json:"status,omitempty"`
}

type ParamsInventory struct {
	Search   *string         `json:"search,omitempty"`
	Favorite *FavoriteStatus `json:"favorite,omitempty"`
	Type     []*string       `json:"type,omitempty"`
	Brand    []*string       `json:"brand,omitempty"`
	Branch   []*string       `json:"branch,omitempty"`
	PageNo   *int            `json:"pageNo,omitempty"`
	Limit    *int            `json:"limit,omitempty"`
}

type ParamsInventoryBranch struct {
	Search *string `json:"search,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Limit  *int    `json:"limit,omitempty"`
}

type ParamsInventoryBrand struct {
	Search *string `json:"search,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Limit  *int    `json:"limit,omitempty"`
}

type ParamsInventoryType struct {
	Search *string `json:"search,omitempty"`
	Offset *int    `json:"offset,omitempty"`
	Limit  *int    `json:"limit,omitempty"`
}

type Post struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type Query struct {
}

type RecoveryHardDeleted struct {
	ID   *string      `json:"id,omitempty"`
	Type *DeletedType `json:"type,omitempty"`
	Mode *DeletedMode `json:"mode,omitempty"`
}

type RecoveryHardDeletedInput struct {
	ID   string      `json:"id"`
	Type DeletedType `json:"type"`
	Mode DeletedMode `json:"mode"`
}

type RecoveryHardDeletedResponse struct {
	Data   *RecoveryHardDeleted `json:"data,omitempty"`
	Status *Status              `json:"status,omitempty"`
}

type ResponseID struct {
	ID *string `json:"id,omitempty"`
}

type ResponseInventories struct {
	Inventories []*Inventory `json:"inventories,omitempty"`
	PageLimit   *int         `json:"pageLimit,omitempty"`
	PageNo      *int         `json:"pageNo,omitempty"`
	TotalPage   *int         `json:"totalPage,omitempty"`
	TotalRow    *int         `json:"totalRow,omitempty"`
}

type SizeInventory struct {
	Weight *int `json:"weight,omitempty"`
	Width  *int `json:"width,omitempty"`
	Length *int `json:"length,omitempty"`
	Height *int `json:"height,omitempty"`
}

type Status struct {
	Code    int     `json:"code"`
	Message *string `json:"message,omitempty"`
}

type UploadInventory struct {
	ID      *string `json:"id,omitempty"`
	Success *bool   `json:"success,omitempty"`
	Reason  *string `json:"reason,omitempty"`
}

type UploadInventoryInput struct {
	UploadDatas []*UpsertInventoryInput `json:"uploadDatas,omitempty"`
	FileName    *string                 `json:"fileName,omitempty"`
}

type UploadInventoryResponse struct {
	Data   *UploadInventory `json:"data,omitempty"`
	Status *Status          `json:"status,omitempty"`
}

type UpsertInventoryBranchInput struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
	UpdatedBy   *string `json:"updatedBy,omitempty"`
}

type UpsertInventoryBrandInput struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
	UpdatedBy   *string `json:"updatedBy,omitempty"`
}

type UpsertInventoryInput struct {
	ID                *string        `json:"id,omitempty"`
	Name              string         `json:"name"`
	InventoryTypeID   string         `json:"inventoryTypeId"`
	InventoryBrandID  string         `json:"inventoryBrandId"`
	InventoryBranchID string         `json:"inventoryBranchId"`
	Favorite          *bool          `json:"favorite,omitempty"`
	Amount            int            `json:"amount"`
	Sku               *string        `json:"sku,omitempty"`
	SerialNumber      *string        `json:"serialNumber,omitempty"`
	ReorderLevel      *int           `json:"reorderLevel,omitempty"`
	Size              *SizeInventory `json:"size,omitempty"`
	Price             int            `json:"price"`
	PriceMember       *int           `json:"priceMember,omitempty"`
	ExpiryDate        *string        `json:"expiryDate,omitempty"`
	Description       *string        `json:"description,omitempty"`
	CreatedBy         *string        `json:"createdBy,omitempty"`
	UpdatedBy         *string        `json:"updatedBy,omitempty"`
}

type UpsertInventoryTypeInput struct {
	ID          *string `json:"id,omitempty"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	CreatedBy   *string `json:"createdBy,omitempty"`
	UpdatedBy   *string `json:"updatedBy,omitempty"`
}

type DeletedMode string

const (
	DeletedModeRecovery DeletedMode = "RECOVERY"
	DeletedModeDelete   DeletedMode = "DELETE"
)

var AllDeletedMode = []DeletedMode{
	DeletedModeRecovery,
	DeletedModeDelete,
}

func (e DeletedMode) IsValid() bool {
	switch e {
	case DeletedModeRecovery, DeletedModeDelete:
		return true
	}
	return false
}

func (e DeletedMode) String() string {
	return string(e)
}

func (e *DeletedMode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeletedMode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeletedMode", str)
	}
	return nil
}

func (e DeletedMode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type DeletedType string

const (
	DeletedTypeInventory       DeletedType = "inventory"
	DeletedTypeInventoryType   DeletedType = "inventoryType"
	DeletedTypeInventoryBrand  DeletedType = "inventoryBrand"
	DeletedTypeInventoryBranch DeletedType = "inventoryBranch"
)

var AllDeletedType = []DeletedType{
	DeletedTypeInventory,
	DeletedTypeInventoryType,
	DeletedTypeInventoryBrand,
	DeletedTypeInventoryBranch,
}

func (e DeletedType) IsValid() bool {
	switch e {
	case DeletedTypeInventory, DeletedTypeInventoryType, DeletedTypeInventoryBrand, DeletedTypeInventoryBranch:
		return true
	}
	return false
}

func (e DeletedType) String() string {
	return string(e)
}

func (e *DeletedType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeletedType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeletedType", str)
	}
	return nil
}

func (e DeletedType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FavoriteStatus string

const (
	FavoriteStatusLike    FavoriteStatus = "LIKE"
	FavoriteStatusDefault FavoriteStatus = "DEFAULT"
)

var AllFavoriteStatus = []FavoriteStatus{
	FavoriteStatusLike,
	FavoriteStatusDefault,
}

func (e FavoriteStatus) IsValid() bool {
	switch e {
	case FavoriteStatusLike, FavoriteStatusDefault:
		return true
	}
	return false
}

func (e FavoriteStatus) String() string {
	return string(e)
}

func (e *FavoriteStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FavoriteStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FavoriteStatus", str)
	}
	return nil
}

func (e FavoriteStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
