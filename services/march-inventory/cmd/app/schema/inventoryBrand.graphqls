type InventoryBrand {
  id: String
  name: String
  description: String
  createdBy: String
  updatedBy: String
  updatedAt: String!
  createdAt: String!
}

type InventoryBrandsDataResponse {
  data: [InventoryBrand]
  status: Status
}

input UpsertInventoryBrandInput {
  id: String
  name: String!
  description: String
  createdBy: String
  updatedBy: String
}

type MutationInventoryBrandResponse {
  data: ResponseId
  status: Status
}

type DeleteInventoryBrandResponse {
  data: ResponseId
  status: Status
}

input ParamsInventoryBrand {
  search: String
  offset: Int
  limit: Int
}

type Query {
  getInventoryBrand(id: String): InventoryBrand @auth(scopes: ["AnyAdminScope"])
  getInventoryBrands(params: ParamsInventoryBrand): InventoryBrandsDataResponse
    @auth(scopes: ["AnyAdminScope"])
}

type Mutation {
  upsertInventoryBrand(
    input: UpsertInventoryBrandInput!
  ): MutationInventoryBrandResponse @auth(scopes: ["INBrandMaker"])
  deleteInventoryBrand(id: String!): MutationInventoryBrandResponse
    @auth(scopes: ["INBrandMaker"])
}
