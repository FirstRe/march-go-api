package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"core/app/helper"
	"core/app/middlewares"
	"march-inventory/cmd/app/graph/types"

	"github.com/99designs/gqlgen/graphql"
)

// UploadInventory is the resolver for the uploadInventory field.
func (r *mutationResolver) UploadInventory(ctx context.Context, file graphql.Upload) (*types.UploadInventoryResponse, error) {
	logctx := helper.LogContext(ClassName, "UploadInventory")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger(userInfo, "userInfo")
	return r.InventoryService.UploadCsv(file, userInfo)
}

// UpsertInventory is the resolver for the upsertInventory field.
func (r *mutationResolver) UpsertInventory(ctx context.Context, input types.UpsertInventoryInput) (*types.MutationInventoryResponse, error) {
	logctx := helper.LogContext(ClassName, "UpsertInventory")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger(userInfo, "userInfo")

	return r.InventoryService.UpsertInventory(input, userInfo)
}

// DeleteInventory is the resolver for the deleteInventory field.
func (r *mutationResolver) DeleteInventory(ctx context.Context, id string) (*types.MutationInventoryResponse, error) {
	logctx := helper.LogContext(ClassName, "DeleteInventory")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger(userInfo, "userInfo")

	return r.InventoryService.DeleteInventory(id, userInfo)
}

// FavoriteInventory is the resolver for the favoriteInventory field.
func (r *mutationResolver) FavoriteInventory(ctx context.Context, id string) (*types.MutationInventoryResponse, error) {
	logctx := helper.LogContext(ClassName, "FavoriteInventory")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger(userInfo, "userInfo")

	return r.InventoryService.FavoriteInventory(id, userInfo)
}

// RecoveryHardDeleted is the resolver for the recoveryHardDeleted field.
func (r *mutationResolver) RecoveryHardDeleted(ctx context.Context, input types.RecoveryHardDeletedInput) (*types.RecoveryHardDeletedResponse, error) {
	logctx := helper.LogContext(ClassName, "RecoveryHardDeleted")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger(userInfo, "userInfo")

	return r.InventoryService.RecoveryHardDeleted(input, userInfo)
}

// GetInventoryNames is the resolver for the getInventoryNames field.
func (r *queryResolver) GetInventoryNames(ctx context.Context) (*types.InventoryNameResponse, error) {
	logctx := helper.LogContext(ClassName, "GetInventories")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger(userInfo, "userInfo")
	return r.InventoryService.GetInventoryNames(userInfo)
}

// GetInventory is the resolver for the getInventory field.
func (r *queryResolver) GetInventory(ctx context.Context, id *string) (*types.InventoryDataResponse, error) {
	logctx := helper.LogContext(ClassName, "GetInventory")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger(userInfo, "userInfo")
	return r.InventoryService.GetInventory(id, userInfo)
}

// GetInventories is the resolver for the getInventories field.
func (r *queryResolver) GetInventories(ctx context.Context, params *types.ParamsInventory) (*types.InventoriesResponse, error) {
	logctx := helper.LogContext(ClassName, "GetInventories")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger(userInfo, "userInfo")
	return r.InventoryService.GetInventories(params, userInfo)
}

// GetInventoryAllDeleted is the resolver for the getInventoryAllDeleted field.
func (r *queryResolver) GetInventoryAllDeleted(ctx context.Context) (*types.DeletedInventoryResponse, error) {
	logctx := helper.LogContext(ClassName, "GetInventories")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger(userInfo, "userInfo")
	return r.InventoryService.GetInventoryAllDeleted(userInfo)
}
