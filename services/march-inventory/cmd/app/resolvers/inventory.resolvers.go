package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"core/app/helper"
	"core/app/middlewares"
	"fmt"
	"log"
	"march-inventory/cmd/app/graph/types"
	"march-inventory/cmd/app/services/inventoryService"
	"march-inventory/cmd/app/statusCode"
)

// UploadInventory is the resolver for the uploadInventory field.
func (r *mutationResolver) UploadInventory(ctx context.Context, input types.UploadInventoryInput) (*types.UploadInventoryResponse, error) {
	panic(fmt.Errorf("not implemented: UploadInventory - uploadInventory"))
}

// UpsertInventory is the resolver for the upsertInventory field.
func (r *mutationResolver) UpsertInventory(ctx context.Context, input types.UpsertInventoryInput) (*types.MutationInventoryResponse, error) {
	logctx := helper.LogContext(ClassName, "UpsertInventory")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger([]interface{}{}, "")
	log.Printf("userInfo: %+v", userInfo)

	return inventoryService.UpsertInventory(input)
}

// DeleteInventory is the resolver for the deleteInventory field.
func (r *mutationResolver) DeleteInventory(ctx context.Context, id string) (*types.MutationInventoryResponse, error) {
	panic(fmt.Errorf("not implemented: DeleteInventory - deleteInventory"))
}

// FavoriteInventory is the resolver for the favoriteInventory field.
func (r *mutationResolver) FavoriteInventory(ctx context.Context, id string) (*types.MutationInventoryResponse, error) {
	panic(fmt.Errorf("not implemented: FavoriteInventory - favoriteInventory"))
}

// RecoveryHardDeleted is the resolver for the recoveryHardDeleted field.
func (r *mutationResolver) RecoveryHardDeleted(ctx context.Context, input types.RecoveryHardDeletedInput) (*types.RecoveryHardDeletedResponse, error) {
	panic(fmt.Errorf("not implemented: RecoveryHardDeleted - recoveryHardDeleted"))
}

// GetInventoryNames is the resolver for the getInventoryNames field.
func (r *queryResolver) GetInventoryNames(ctx context.Context) (*types.InventoryNameResponse, error) {
	logctx := helper.LogContext(ClassName, "GetInventories")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger(userInfo, "userInfo")
	return inventoryService.GetInventoryNames(userInfo)
}

// GetInventory is the resolver for the getInventory field.
func (r *queryResolver) GetInventory(ctx context.Context, id *string) (*types.InventoryDataResponse, error) {
	reponse := types.InventoryDataResponse{
		Status: statusCode.Success("OK"),
		Data:   nil,
	}
	return &reponse, nil
}

// GetInventories is the resolver for the getInventories field.
func (r *queryResolver) GetInventories(ctx context.Context, params *types.ParamsInventory) (*types.InventoriesResponse, error) {
	logctx := helper.LogContext(ClassName, "GetInventories")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger(userInfo, "userInfo")
	return inventoryService.GetInventories(params, userInfo)
}

// GetInventoryAllDeleted is the resolver for the getInventoryAllDeleted field.
func (r *queryResolver) GetInventoryAllDeleted(ctx context.Context) (*types.DeletedInventoryResponse, error) {
	panic(fmt.Errorf("not implemented: GetInventoryAllDeleted - getInventoryAllDeleted"))
}
