package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"core/app/helper"
	"core/app/middlewares"
	"fmt"
	graph "march-user/cmd/app/graph/generated"
	"march-user/cmd/app/graph/types"
)

// UpdateProfile is the resolver for the updateProfile field.
func (r *mutationResolver) UpdateProfile(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: UpdateProfile - updateProfile"))
}

// CreateProfile is the resolver for the createProfile field.
func (r *mutationResolver) CreateProfile(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: CreateProfile - createProfile"))
}

// CreateSubUser is the resolver for the createSubUser field.
func (r *mutationResolver) CreateSubUser(ctx context.Context, input *types.ParamsCreateSubUser) (*types.SubUserDataResponse, error) {
	panic(fmt.Errorf("not implemented: CreateSubUser - createSubUser"))
}

// RevokeSubUser is the resolver for the revokeSubUser field.
func (r *mutationResolver) RevokeSubUser(ctx context.Context, userID *string) (*types.SubUserDataResponse, error) {
	panic(fmt.Errorf("not implemented: RevokeSubUser - revokeSubUser"))
}

// RemoveSubUser is the resolver for the removeSubUser field.
func (r *mutationResolver) RemoveSubUser(ctx context.Context, userID *string) (*types.SubUserDataResponse, error) {
	panic(fmt.Errorf("not implemented: RemoveSubUser - removeSubUser"))
}

// UpdateRoleUser is the resolver for the updateRoleUser field.
func (r *mutationResolver) UpdateRoleUser(ctx context.Context, input *types.ParamsUpdateRoleUser) (*types.SubUserDataResponse, error) {
	panic(fmt.Errorf("not implemented: UpdateRoleUser - updateRoleUser"))
}

// GetProfile is the resolver for the getProfile field.
func (r *queryResolver) GetProfile(ctx context.Context) (*types.User, error) {
	logctx := helper.LogContext(ClassName, "GetProfile")
	userInfo := middlewares.UserInfo(ctx)
	logctx.Logger(userInfo, "userInfo")
	panic(fmt.Errorf("not implemented: GetProfile - getProfile"))
}

// GetTeam is the resolver for the getTeam field.
func (r *queryResolver) GetTeam(ctx context.Context) ([]*types.User, error) {
	panic(fmt.Errorf("not implemented: GetTeam - getTeam"))
}

// GetRole is the resolver for the getRole field.
func (r *queryResolver) GetRole(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: GetRole - getRole"))
}

// GetTask is the resolver for the getTask field.
func (r *queryResolver) GetTask(ctx context.Context) (*string, error) {
	panic(fmt.Errorf("not implemented: GetTask - getTask"))
}

// GetPermission is the resolver for the getPermission field.
func (r *queryResolver) GetPermission(ctx context.Context) (*types.GetPermissionResponse, error) {
	panic(fmt.Errorf("not implemented: GetPermission - getPermission"))
}

// Test is the resolver for the test field.
func (r *queryResolver) Test(ctx context.Context) (*string, error) {

	value := "test2"
	return &value, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

const ClassName string = "UserResolver"
