package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"core/app/helper"
	"fmt"
	"march-auth/cmd/app/graph/types"
	authService "march-auth/cmd/app/services/auth"
)

const ClassNameAuth string = "AuthResolver"

// TokenExpire is the resolver for the tokenExpire field.
func (r *mutationResolver) TokenExpire(ctx context.Context, refreshToken string) (*types.Token, error) {
	panic(fmt.Errorf("not implemented: TokenExpire - tokenExpire"))
}

// SignOut is the resolver for the signOut field.
func (r *mutationResolver) SignOut(ctx context.Context, id string) (*types.SignOutResponse, error) {
	panic(fmt.Errorf("not implemented: SignOut - signOut"))
}

// VerifyAccessToken is the resolver for the verifyAccessToken field.
func (r *mutationResolver) VerifyAccessToken(ctx context.Context, token string) (*types.VerifyAccessTokenResponse, error) {
	logctx := helper.LogContext(ClassNameAuth, "VerifyAccessToken")
	logctx.Logger([]interface{}{}, "code")
	return authService.VerifyAccessToken(token)
	// panic(fmt.Errorf("not implemented: VerifyAccessToken - verifyAccessToken"))
}

// SignInOAuth is the resolver for the signInOAuth field.
func (r *mutationResolver) SignInOAuth(ctx context.Context, code string) (*types.Token, error) {
	logctx := helper.LogContext(ClassNameAuth, "SignInOAuth")
	logctx.Logger(code, "code")
	return authService.SignInOAuth(code)
	// panic(fmt.Errorf("not implemented: SignInOAuth - signInOAuth"))
}
